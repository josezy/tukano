#!/bin/bash

REPO_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. && pwd )"

function info {
    echo -e "\\n$(tput bold)$(tput setaf 4)" "$@" "$(tput sgr0)"
}
function success {
    echo -e "\\n$(tput bold)" "$@" "$(tput sgr0)"
}
function error {
    echo -e "\\n$(tput bold)$(tput setaf 1)" "$@" "$(tput sgr0)"
}


success " ðŸ”µ    Setup: Development Machine w/ supervisord"
    if [[ "$(uname)" != 'Linux' ]]; then
        error "Not on Linux!: $(uname)"
        exit 1
    fi
echo "       Installing from $REPO_DIR..."



info "--> Installing system packages..."
    # Detect Python version available
    PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    echo "   Detected Python version: $PYTHON_VERSION"
    
    sudo apt update
    sudo apt install -y python3 python3-pip python3-dev python3-venv \
        libxml2-dev libxslt1-dev libatlas-base-dev \
        redis-server supervisor || {
        error "Failed to install required packages"
        exit 1
    }
    
    # Install libcamera and GStreamer for camera streaming
    echo "   > Installing camera and streaming packages..."
    sudo apt install -y \
        libcamera-apps libcamera-dev \
        gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
        gstreamer1.0-libav gstreamer1.0-tools \
        python3-gst-1.0 gir1.2-gst-rtsp-server-1.0 || {
        error "Failed to install camera/streaming packages"
        exit 1
    }

    sudo systemctl stop redis-server
    sudo systemctl disable redis-server

echo "   âˆš   Core packages installed:"
echo "           Python, redis, supervisor, libcamera, and GStreamer..."



info "--> Setting up Python virtual environment..."
    python3 -m venv .venv || {
        error "Failed to create virtual environment"
        exit 1
    }
    source .venv/bin/activate
    python -m pip install --upgrade pip
success "   âˆš   Virtual environment active: $(which python) ($(python --version))"



info "--> Creating data directory and subfolders..."
    echo " > Creating data/logs dir..."
    mkdir -p "$REPO_DIR/data/logs" || {
        error "Failed to create logs directory"
        exit 1
    }
    mkdir -p "$REPO_DIR/data/pics"
    mkdir -p "$REPO_DIR/data/videos"
    
    # Create MAVLink message definitions directory with detected Python version
    MAVLINK_DIR="$REPO_DIR/.venv/lib/python$PYTHON_VERSION/site-packages/message_definitions/v1.0/"
    mkdir -p "$MAVLINK_DIR" || {
        error "Failed to create MAVLink directory"
        exit 1
    }
success "   âˆš   Done"



info "--> Installing python dependencies + copying MAVLink dialect..."
    pip install -r requirements.txt || {
        error "Failed to install Python requirements"
        exit 1
    }
    
    if [ -d "$REPO_DIR/dialects" ]; then
        cp "$REPO_DIR/dialects"/* "$MAVLINK_DIR" 2>/dev/null || true
    fi
    
success "   âˆš   Dependencies installed successfully"



info "--> Setting up supervisor configuration..."
    echo " > Creating symbolic links..."
    sudo ln -fs "$REPO_DIR/etc/supervisor/tukano.conf" /etc/supervisor/conf.d/tukano.conf || {
        error "Failed to create supervisor config symlink"
        exit 1
    }
    
    if [ ! -L /opt/tukano ]; then
        sudo ln -fs "$REPO_DIR" /opt/tukano || {
            error "Failed to create /opt/tukano symlink"
            exit 1
        }
    fi

    echo " > Reloading supervisor service..."
    sudo service supervisor reload || {
        error "Failed to reload supervisor"
        exit 1
    }
    sleep 3
    sudo supervisorctl status

success "   âˆš   Supervisor configured and running"

# if [[ $PATH == *"/opt/tukano/bin"* ]]; then
#     echo " > 'tukano' command is in \$PATH"
# else
#     echo " > Adding 'tukano' to PATH..."
#     echo "PATH=/opt/tukano/bin:\$PATH" >> ~/.bashrc
# fi

success " âœ… Done."
    echo "       - Data is stored in tukano/data/"

exit 0
